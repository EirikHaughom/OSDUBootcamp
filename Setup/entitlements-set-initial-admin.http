# -------HTTP REST CLIENT -------
# https://marketplace.visualstudio.com/items?itemName=humao.rest-client

## This script is used to add a user as owner on the default groups created in an OSDU instance
## It is based on the MS script entitlement_manage.http that can be found here:
# https://community.opengroup.org/osdu/platform/deployment-and-operations/infra-azure-provisioning/-/blob/master/tools/rest/entitlement_manage.http

# -----------------------
# OAUTH (Variables)
# -----------------------
###
@login_base = login.microsoftonline.com/{{TENANT_ID}}
@oauth_token_host = {{login_base}}/oauth2/v2.0/token
@scopes = {{CLIENT_ID}}/.default openid profile offline_access


# -----------------------
# OAUTH  Login
# -----------------------
###
# Purpose: Login to OSDU with the root service principle and get an access token
# @name login
POST https://{{oauth_token_host}} HTTP/1.1
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&client_id={{CLIENT_ID}}/.default
&client_secret={{CLIENT_SECRET}}
&scope={{scopes}}


# -----------------------
# API (Variables)
# -----------------------
###
@access_token = {{login.response.body.access_token}}
@end_point = https://{{OSDU_HOST}}
@entitlements_host = {{end_point}}/api/entitlements/v2
@partition_host = {{end_point}}/api/partition/v1
@seismicdms_host = {{end_point}}/seistore-svc/api/v3
@data_partition_id = {{DATA_PARTITION}}
@domain = dataservices.energy
@user_group = users@{{data_partition_id}}.{{domain}}
@admin_group = users.datalake.admin@{{data_partition_id}}.{{domain}}

# ---------------------------------
# USER OBJECT ID
# ---------------------------------
# This is the OID for the user you are adding.

# Current admin is agreed to be jmor@equinor.com - do not change this unless otherwise agreed.
@member_oid = a33fdac8-a831-4a2f-a148-f3fc7516d676

#GTOX
#@member_oid = 608d7916-b468-4062-b137-f3c6b04fa9cb

#OBER
#@member_oid = 32b49f0b-bf58-4c4e-b090-2e8fe7540e2a

# -----------------------
# Add "super-user" to Admin group for Seismic DDMS compatibility
# -----------------------

###
# Purpose: Add Super-user to Admin-group
# @name addSUDOtoAdminGroup
POST {{entitlements_host}}/groups/{{admin_group}}/members
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}
Content-Type: application/json

{
  "email": "{{CLIENT_ID}}",
  "role": "MEMBER"
}


# -----------------------
# Create User
# -----------------------

###
# Purpose: Create a new User.
# @name createUser
POST {{entitlements_host}}/groups/{{user_group}}/members
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}
Content-Type: application/json

{
  "email": "{{member_oid}}",
  "role": "OWNER"
}


# -----------------------
# Show Available Groups
# -----------------------

###
# Purpose: Show available groups
# @name createUser
GET {{entitlements_host}}/groups
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}
Content-Type: application/json

# -----------------------
# Manage Roles
# -----------------------

###
# Purpose: Assign the user to the users.data.root group
# @name assignMemberToDataRootGroup
@root_group = users.data.root@{{data_partition_id}}.{{domain}}
POST {{entitlements_host}}/groups/{{root_group}}/members
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}
Content-Type: application/json

{
  "email": "{{member_oid}}",
  "role": "OWNER"
}

###
# Purpose: Assign the user to the datalake.viewers Group
# @name assignMemberToViewersGroup
@viewer_group = users.datalake.viewers@{{data_partition_id}}.{{domain}}
POST {{entitlements_host}}/groups/{{viewer_group}}/members
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}
Content-Type: application/json

{
  "email": "{{member_oid}}",
  "role": "OWNER"
}


###
# Purpose: Assign the user to the datalake.editors Group
# @name assignMemberToEditorsGroup
@editor_group = users.datalake.editors@{{data_partition_id}}.{{domain}}
POST {{entitlements_host}}/groups/{{editor_group}}/members
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}
Content-Type: application/json

{
  "email": "{{member_oid}}",
  "role": "OWNER"
}


###
# Purpose: Assign the user to the datalake.admins Group
# NOTE: This role can not delete for Legal, Schema or Storage
# @name assignMemberToAdminGroup
@admin_group = users.datalake.admins@{{data_partition_id}}.{{domain}}
POST {{entitlements_host}}/groups/{{admin_group}}/members
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}
Content-Type: application/json

{
  "email": "{{member_oid}}",
  "role": "OWNER"
}


###
# Purpose: Assign the user to the datalake.ops Group
# NOTE: This role can delete data
# @name assignMemberToOpsGroup
@ops_group = users.datalake.ops@{{data_partition_id}}.{{domain}}
POST {{entitlements_host}}/groups/{{ops_group}}/members
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}
Content-Type: application/json

{
  "email": "{{member_oid}}",
  "role": "OWNER"
}


# Congratulations the user should be able to add and remove users from
# all the default groups using the OSDUCLI.

###
# Purpose: Enable Search Extension Aggregate API
PATCH {{partition_host}}/partitions/{{data_partition_id}}
Authorization: Bearer {{access_token}}
Accept: application/json
Content-Type: application/json

{
  "properties": {
    "slb-feature-aggregate-api": {
      "sensitive": false,
      "value": "true"
    }
  }
}

###
# Purpose: Register a seismic tenant in Seismic Store
POST {{seismicdms_host}}/tenant/{{data_partition_id}}
Authorization: Bearer {{access_token}}
Accept: application/json
Content-Type: application/json

{
  "gcpid": "{{data_partition_id}}",
  "esd": "{{data_partition_id}}.{{domain}}",
  "default_acl": "users.datalake.admins@{{data_partition_id}}.{{domain}}"
}